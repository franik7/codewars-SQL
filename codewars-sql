//SQL Basics: Simple WHERE and ORDER BY
-- Create your SELECT statement here
select * from people 
where age > 50 
order by age desc


//On the Canadian Border (SQL for Beginners #2)
select * from travelers
where country NOT IN ('Canada', 'Mexico', 'USA')


//SQL Basics: Simple DISTINCT
-- Create your SELECT statement here
select distinct age from people 


//Best-Selling Books (SQL for Beginners #5)
-- Your Code Here
select * from books
order by copies_sold desc
limit 5


//Adults only (SQL for Beginners #1)
--Your code here
select name, age from users
where age >= 18


//Collect Tuition (SQL for Beginners #4)
-- Your Code Here
select * from students
where tuition_received = false


//SQL Basics: Simple GROUP BY
SELECT age, COUNT(*) as people_count FROM people GROUP BY age;


//SQL Grasshopper: Select Columns
-- Type your SQL here
select custid, custname, custstate from customers;


//GROCERY STORE: Inventory
-- select all of the items
SELECT id, name, stock from products
where stock < 3 AND producent = 'CompanyA'
order by products.id


//Century From Year
--your statment goes here--
select 
ceil(yr / 100.0) as century
from years;


//Easy SQL: Cube Root and Natural Log
/*  SQL  */
select cbrt(number1) as cuberoot, ln(number2) as logarithm from decimals;


//Easy SQL - Ordering
/*  SQL  */
select * from companies
order by employees desc;


//SQL with LOTR: Elven Wildcards
--but on the land of LÃ³rien no shadow lay--
select concat(initcap(firstname),' ', initcap(lastname)) as shortlist from elves
where firstname LIKE '%tegil%' OR lastname LIKE '%astar%';


//SQL with Pokemon: Damage Multipliers
-- i choose you! --
select pokemon.pokemon_name, pokemon.str * multipliers.multiplier as modifiedStrength, multipliers.element 
from pokemon 
join multipliers on pokemon.element_id=multipliers.id
where pokemon.str * multipliers.multiplier > 39
order by pokemon.str * multipliers.multiplier desc


//SQL with Harry Potter: Sorting Hat Comparators
/* Oh you may not think I'm pretty,
But don't judge on what you see,
I'll eat myself if you can find
A smarter hat than me. */

select id, name, quality1, quality2 from students
where quality1 = 'evil' AND quality2 = 'cunning' OR
quality1 = 'brave' AND quality2 != 'evil' OR 
quality1 = 'studious' OR quality2 = 'intelligent' OR quality1 = 'intelligent' OR quality2 = 'studious' OR
quality1 = 'hufflepuff' OR quality2 = 'hufflepuff'
order by id;


//SQL Basics: Repeat and Reverse
/*  SQL  */
select CONCAT(name,name,name) as name, reverse(characteristics) as characteristics from monsters 


//SQL Basics: Simple MIN / MAX
-- Create your SELECT statement 
select min(age) as age_min, max(age) as age_max from people


//SQL Basics: Mod
/*  SQL  */
select mod(number1, number2) from decimals.


//Easy SQL: Counting and Grouping
/*  SQL  */
select race, count(race) from demographics
group by race
order by count(race) desc


//SQL Basics: Simple JOIN with COUNT
-- Create your SELECT statement here
select people.id, people.name, count(toys.id) as toy_count from people join toys 
on people.id=toys.people_id
group by people.id


//SQL Basics: Simple JOIN
-- Create your SELECT statement here
select products.id, products.name, 
products.isbn, products.company_id,
products.price, companies.name as company_name from products 
join companies on products.company_id = companies.id


//GROCERY STORE: Support Local Products
-- Replace with your SQL Query
select country, count(products.id) as products from products  
where country IN ('United States of America', 'Canada')
group by country
order by count(products.id) desc


//SQL: Concatenating Columns
/*  SQL  */
select concat(prefix,' ',first,' ',last,' ',suffix) as title from names


//1. Find all active students
-- Type your query here
select * from students
where isActive = 1


//Easy SQL: LowerCase
/*  SQL  */
select id, name, birthday, lower(race) as race from demographics


//Easy SQL: Rounding Decimals
/*  SQL  */
select floor(number1) as number1, ceiling(number2) as number2 from decimals


//GROCERY STORE: Real Price!
-- Replace with your SQL Query
select name, price, round((price / (weight / 1000))::numeric, 2)::float as price_per_kg, weight from products
order by price_per_kg asc, name asc
